{"version":3,"sources":["assets/image_not_found.png","assets/Plus.svg","assets/Search.svg","assets/hero-image.png","assets/Logo.svg","assets/gradiend-bg.svg","assets/down arrow.svg","assets/Remove.svg","routes/PublicRoutes.jsx","redux/slices/searchSlice.jsx","redux/slices/messageSlice.jsx","redux/slices/collectionsSlice.jsx","shared/constantes.js","redux/slices/selectedCollectionSlice.jsx","redux/slices/selectedImageSlice.jsx","redux/slices/spinnerSlice.jsx","actions/search.jsx","pages/home/HomePage.jsx","pages/home/HomePage.logic.jsx","components/MainNavBar/MainNavBar.jsx","components/MainNavBar/MainNavBar.logic.jsx","components/imgCard/ImgCard.jsx","components/imagesCollections/ImagesCollections.jsx","components/imagesCollections/ImagesCollections.logic.jsx","pages/searchResultPage/SearchResultPage.jsx","pages/searchResultPage/SearchResultPage.logic.jsx","components/rowGridCollection/RowGridCollection.jsx","components/addToCollection/ModalAddToCollection.logic.jsx","components/addToCollection/ModalAddToCollection.jsx","pages/imagesDetail/ImagesDetailPage.logic.jsx","pages/imagesDetail/ImagesDetailPage.jsx","components/cardCollectionPreview/CardCollectionPreview.jsx","components/cardCollectionPreview/CardCollectionPreview.logic.jsx","pages/collectionPage/CollectionPage.jsx","pages/collectionPhotosPage/CollectionPhotosPage.jsx","components/alertComponent/AlertComponent.jsx","components/alertComponent/AlertComponent.logic.jsx","components/alertContainer/AlertContainer.jsx","components/spinnerComponent/SpinnerComponent.jsx","routes/RoutesApp.jsx","redux/index.jsx","components/errorBoundary/ErrorBoundary.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","PublicRoutes","_ref","element","Component","auth","React","createElement","Navigate","to","searchSlice","createSlice","name","initialState","result","criteria","reducers","setResult","state","action","payload","clearResult","searchSlice_setResult","actions","messageSlice","setMessage","title","message","code","detail","type","unshift","id","Date","getSeconds","removeMessage","filter","e","shift","clearMessage","CollectionSlice","inCollection","notInCollection","allCollections","refresh","setAllCollections","data","setInCollection","setRefresh","setNotInCollection","resetCollections","setReload","UNSPLASH_ACCESS_KEY","ACCESS_TOKEN","SelectedCollectionSlice","cantPhotos","photos","setCollectionPhotos","setData","clearData","SelectedImageSlice","image","setImage","clearImage","spinnerSlice","visible","label1","label2","setShowSpinner","_action$payload$label","_action$payload","_action$payload$label2","_action$payload2","hideSpinner","search","value","async","response","axios","get","params","query","per_page","page","headers","Authorization","results","length","dispatch","error","status","getUserCollections","imageId","arguments","undefined","elem","preview_photos","find","HomePage","searchValue","divStyle","handlerSearchChange","handlerSearchImage","HomePageLogic","backgroundImage","bgImage","setSearchValue","useState","useSelector","useDispatch","navigate","useNavigate","useEffect","target","keyCode","className","style","form","onChange","onKeyDown","placeholder","src","searchIcon","alt","MainNavBar","isActive","goToHome","MainNavBarLogic","location","useLocation","URI","pathname","Link","Logo","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","onClick","ImgCard","props","selectedImage","redirect","setRedirect","img","handlerDetailImageClick","getPhoto","urls","regular","description","ImagesCollections","clear","images","ImagesCollectionsLogic","windowWidth","setWindowWidth","window","innerWidth","columnas","setColumnas","parseInt","dataArr","setDataArr","setImages","handleResize","addEventListener","removeEventListener","imagenesPorColumna","Math","ceil","dataColumna","slice","reduce","acum","Fragment","map","col","i","key","y","SearchResultPage","handlerInputSearchChange","handlerInputCriteriaKeyDown","SearchResultPageLogic","setCriteria","RowGridCollection","memo","item","info","rowId","handlerSetActive","handlerAction","textAction","iconAction","cover_photo","small","imgNotFound","ModalAddToCollectionLogic","closeModal","collection","setValue","idActiveRow","setIdActiveRow","dataCollection","setDataCollection","prevCollection","setPrevCollection","timer","setTimeout","clearTimeout","JSON","stringify","includes","handlerChangeValue","handlerGridAction","addImageToCollection","collectionId","post","photo_id","handlerNewCollection","isPrivate","private","Content-Type","Cache-Control","createCollection","ModalAddToCollection","show","plusIcon","total_photos","ImagesDetailPageLogic","showModalAddToCollection","setshowModalAddToCollection","collections","getMonthAndYear","fecha","created_at","toLocaleString","month","getDate","getFullYear","handlerDownload","imageName","downloadImage","photoId","urlDescarga","downloadLink","url","imageResponse","responseType","imageBlob","Blob","link","document","href","URL","createObjectURL","download","body","appendChild","click","removeChild","handlerRemoveAction","removeImageFromCollection","delete","handlerAddToCollection","handlerCloseModal","ImagesDetailPage","full","alt_description","user","profile_image","downArrowIcon","removeIcon","CardCollectionPreview","capitalCase","handlerClickCard","text","substring","toUpperCase","toLowerCase","CardCollectionPreviewLogic","CollectionPage","getAllCollections","CollectionPhotosPage","useParams","getCollectionPhotos","AlertComponent","showAlert","progress","alertRef","darkenColor","closeAlert","AlertComponentLogic","setShowAlert","setProgress","useRef","interval","setInterval","prev","alertInterval","clearInterval","current","factor","rgb","getComputedStyle","backgroundColor","match","r","g","b","max","min","floor","ref","width","background","AlertContainer","errors","err","SpinnerComponent","RoutesApp","isLogued","setIsLogued","BrowserRouter","Routes","Route","exact","path","configureStore","reducer","ErrorBoundary","constructor","super","this","hasError","errorInfo","[object Object]","componentDidCatch","setState","console","render","_this$state$errorInfo","whiteSpace","toString","componentStack","children","App","Provider","store","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById"],"mappings":"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","file":"static/js/main.d4a26d5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image_not_found.5d8165d6.png\";","module.exports = __webpack_public_path__ + \"static/media/Plus.8fa267ad.svg\";","module.exports = __webpack_public_path__ + \"static/media/Search.daebfb4c.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero-image.762578de.png\";","module.exports = __webpack_public_path__ + \"static/media/Logo.035628bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/gradiend-bg.a66a36f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/down arrow.510a1d5e.svg\";","module.exports = __webpack_public_path__ + \"static/media/Remove.4900ed01.svg\";","import React from 'react'\r\nimport { Navigate } from 'react-router-dom'\r\n\r\nconst PublicRoutes = ({element: Component, auth}) => {\r\n    return !auth ? Component : <Navigate to=\"/home\"/>\r\n}\r\n\r\nexport default PublicRoutes","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const searchSlice = createSlice({\r\n    name: 'searchSlice',\r\n\r\n    initialState: {result: [], criteria: ''},\r\n\r\n    reducers: {\r\n        setResult: (state, action) => {\r\n            state.result = action.payload.result\r\n            state.criteria = action.payload.criteria\r\n        },\r\n        \r\n        clearResult: (state) => {\r\n            state.result = []\r\n            state.criteria = ''\r\n        }\r\n    }\r\n})\r\n\r\nexport const { setResult, clearResult } = searchSlice.actions\r\nexport default searchSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const messageSlice = createSlice({\r\n    name: 'messageSlice',\r\n\r\n    initialState: [], //{message: null, code: null, detail: null, type: null},\r\n\r\n    reducers: {\r\n        setMessage: (state, action) => {\r\n            const title = action.payload.title\r\n            const message = action.payload.message\r\n            const code = action.payload.code\r\n            const detail = action.payload.detail\r\n            const type = action.payload.type\r\n            state.unshift({id: (new Date()).getSeconds(), title ,message, code, detail, type})\r\n        },\r\n\r\n        removeMessage: (state, action) => {\r\n            if(action.payload.id){\r\n                state = state.filter( e => e.id !== action.payload.id)\r\n            }else{\r\n                state.shift()\r\n            }\r\n        },\r\n\r\n        clearMessage: (state) =>{\r\n            state = []\r\n        }\r\n    }\r\n})\r\n\r\nexport const { setMessage, removeMessage, clearMessage } = messageSlice.actions\r\nexport default messageSlice.reducer","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const CollectionSlice = createSlice({\r\n    name: 'CollectionSlice',\r\n\r\n    initialState: {\r\n            inCollection: [], \r\n            notInCollection: [], \r\n            allCollections:[],\r\n            refresh: false\r\n        },\r\n\r\n    reducers: {\r\n        setAllCollections: (state, action) => {\r\n            state.allCollections = action.payload.data\r\n        },\r\n\r\n        setInCollection: (state, action) => {\r\n            state.inCollection = action.payload.inCollection\r\n        },\r\n\r\n        setRefresh: (state, action) => {\r\n            state.refresh = action.payload.refresh\r\n        },\r\n\r\n        setNotInCollection: (state, action) => {\r\n            state.notInCollection = action.payload.notInCollection\r\n        },\r\n\r\n        resetCollections: (state) => {\r\n            state.inCollection = []\r\n            state.notInCollection = []\r\n        }\r\n    }\r\n})\r\n\r\nexport const { \r\n    setInCollection, \r\n    setNotInCollection, \r\n    resetCollections, \r\n    setAllCollections,\r\n    setReload,\r\n    setRefresh\r\n} = CollectionSlice.actions\r\nexport default CollectionSlice.reducer","export const UNSPLASH_ACCESS_KEY = 'Nqs5uEQt-WK6dDH3PdU_wyDkn4Lq1IfxzNIQiL6up4M';\r\nexport const ACCESS_TOKEN = 'mxCLrQITsENlZrtxuvG09ri8hXGZvpWILVD8VXYlDoQ'","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n export const SelectedCollectionSlice = createSlice({    \r\n    name: 'SelectedCollectionSlice',\r\n    \r\n    initialState: {id: null, title: '', cantPhotos: 0, photos: []},\r\n\r\n    reducers: {\r\n        \r\n        setCollectionPhotos: (state, action) => {\r\n            state.photos = action.payload.photos\r\n        },\r\n\r\n        setData: (state, action) => {\r\n            state.id = action.payload.id\r\n            state.cantPhotos = action.payload.cantPhotos\r\n            state.title = action.payload.title\r\n        },\r\n\r\n        clearData: (state) => {\r\n            state.id = null\r\n            state.cantPhotos = 0\r\n            state.photos = []\r\n        }\r\n    }\r\n\r\n})\r\n\r\nexport const { setCollectionPhotos, setData, clearData } = SelectedCollectionSlice.actions\r\nexport default SelectedCollectionSlice.reducer","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n export const SelectedImageSlice = createSlice({    \r\n    name: 'SelectedImageSlice',\r\n    \r\n    initialState: {image: null},\r\n\r\n    reducers: {\r\n        setImage: (state, action) => {\r\n            state.image = action.payload.image\r\n        },\r\n\r\n        clearImage: (state) => {\r\n            state.image = null\r\n        }\r\n    }\r\n\r\n})\r\n\r\nexport const { setImage, clearImage } = SelectedImageSlice.actions\r\nexport default SelectedImageSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const spinnerSlice = createSlice({\r\n    name: 'spinnerSlice',\r\n\r\n    initialState: {visible: false, label1: null, label2: null}, \r\n\r\n    reducers: {\r\n        setShowSpinner: (state, action) => {            \r\n            state.visible = true\r\n            state.label1 = action.payload?.label1 ?? null\r\n            state.label2 = action.payload?.label2 ?? null\r\n        },\r\n\r\n        hideSpinner: (state) => {\r\n            state.visible = false\r\n            state.label1 = null\r\n            state.label2 = null                  \r\n        }\r\n    }\r\n})\r\n\r\nexport const { setShowSpinner, hideSpinner } = spinnerSlice.actions\r\nexport default spinnerSlice.reducer","import axios from 'axios'\r\nimport { setResult } from '../redux/slices/searchSlice'\r\nimport { setMessage } from '../redux/slices/messageSlice.jsx';\r\nimport { setInCollection, setNotInCollection, setAllCollections, setRefresh} from '../redux/slices/collectionsSlice';\r\nimport { UNSPLASH_ACCESS_KEY, ACCESS_TOKEN } from '../shared/constantes.js'\r\nimport { setCollectionPhotos } from '../redux/slices/selectedCollectionSlice.jsx';\r\nimport { setImage } from '../redux/slices/selectedImageSlice.jsx';\r\nimport { setShowSpinner } from '../redux/slices/spinnerSlice.jsx';\r\n//export const ACCESS_TOKEN = 'mxCLrQITsENlZrtxuvG09ri8hXGZvpWILVD8VXYlDoQ'\r\n\r\nexport const search = (value) => async (dispatch) => {\r\n    try {\r\n        const response = await axios.get('https://api.unsplash.com/search/photos', {\r\n          params: {\r\n            query: value,\r\n            per_page: 20, \r\n            page: 1\r\n          },\r\n          headers: {\r\n            Authorization: `Client-ID ${UNSPLASH_ACCESS_KEY}`,\r\n          },\r\n        });\r\n        if(response.data.results.length === 0){\r\n          dispatch(setMessage({title: 'Error', message:  \"No se encontraron imágenes relacionadas con ''\" + value + \"''. Intenta con otra búsqueda.\", type: 'danger'}))\r\n        }\r\n        dispatch(setResult({result: response.data.results, criteria: value}))\r\n      } catch (error) {\r\n        if(error.status === 403){\r\n          dispatch(setMessage({title: 'Error', message:  \"Se ha excedido el máximo de peticiones. Intentalo más tarde.\", type: 'danger'}))\r\n        }else{\r\n          dispatch(setMessage({title: 'Error', message:  \"Error al buscar imágenes\" + error.message, type: 'danger'}))\r\n        }\r\n        \r\n      }\r\n    \r\n}\r\n\r\nexport const getPhoto = (id) => async (dispatch) => {\r\n  try {\r\n      const response = await axios.get(`https://api.unsplash.com/photos/${id}`, {\r\n        params: {id},\r\n        headers: {\r\n          Authorization: `Client-ID ${UNSPLASH_ACCESS_KEY}`,\r\n        },\r\n      });\r\n      if(!response.data){\r\n        dispatch(setMessage({title: 'Error', message:  \"No se encontró la imágen.\", type: 'danger'}))\r\n      }else{\r\n        dispatch(setImage({image: response.data}))\r\n      }\r\n    } catch (error) {\r\n      if(error.status === 403){\r\n        dispatch(setMessage({title: 'Error', message:  \"Se ha excedido el máximo de peticiones. Intentalo más tarde.\", type: 'danger'}))\r\n      }else{\r\n        dispatch(setMessage({title: 'Error', message:  \"Error al buscar imágenes\" + error.message, type: 'danger'}))\r\n      }\r\n    }\r\n  \r\n}\r\n\r\nexport const getUserCollections = (imageId = null) => async (dispatch)  => {\r\n  try{\r\n      const response = await axios.get('https://api.unsplash.com/users/marcelo_b/collections', {\r\n        params: {\r\n          per_page: 30, \r\n          page: 1\r\n        },\r\n        headers: {\r\n          Authorization: `Bearer ${ACCESS_TOKEN}`\r\n        },\r\n      });\r\n\r\n      const notInCollection = response.data.filter(elem => elem.preview_photos === null || elem.preview_photos.find(e => e.id ===  imageId) === undefined)\r\n      const inCollection = response.data.filter(elem => elem.preview_photos !== null && elem.preview_photos.find(e => e.id ===  imageId) !== undefined)\r\n      dispatch(setNotInCollection({notInCollection}))\r\n      dispatch(setInCollection({inCollection}))\r\n    \r\n  }catch(error){\r\n    if(error.status === 403){\r\n      dispatch(setMessage({title: 'Error', message:  \"Se ha excedido el máximo de peticiones. Intentalo más tarde.\", type: 'danger'}))\r\n    }else{\r\n      dispatch(setMessage({title: 'Error', message:  \"Error al obtener las colecciones:\" + error.message, type: 'danger'}))\r\n    }\r\n  }\r\n}\r\n\r\nexport const downloadImage = (photoId, imageName) => async (dispatch) => {\r\n  try{\r\n    const urlDescarga = `https://api.unsplash.com/photos/${photoId}/download`;\r\n    const response = await axios.get(urlDescarga, \r\n      {\r\n        headers: {\r\n          Authorization: `Client-ID ${UNSPLASH_ACCESS_KEY}`,\r\n          //Authorization: `Bearer ${ACCESS_TOKEN}`\r\n        }\r\n      }\r\n    )\r\n    const downloadLink = response.data.url;\r\n\r\n    //Descargar la imagen como un Blob para evitar abrirla en una pestaña\r\n    const imageResponse = await axios.get(downloadLink, { responseType: 'blob' });\r\n    const imageBlob = new Blob([imageResponse.data], { type: 'image/jpeg' });\r\n\r\n    //Crear un enlace de descarga usando el Blob\r\n    const link = document.createElement(\"a\");\r\n    link.href = URL.createObjectURL(imageBlob);\r\n    link.download = `${imageName}.jpg`; // Nombre del archivo descargado\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n\r\n    dispatch(setMessage({title: 'Atención', message:  \"Imagen descargada correctamente desde Unsplash.\", type: 'success'}))\r\n\r\n  }catch(error){\r\n    if(error.status === 403){\r\n      dispatch(setMessage({title: 'Error', message:  \"Se ha excedido el máximo de peticiones. Intentalo más tarde.\", type: 'danger'}))\r\n    }else{\r\n      dispatch(setMessage({title: 'Error', message:  \"Error al descargar la imágen:\" + error.message, type: 'danger'}))\r\n    }\r\n  }\r\n}\r\n\r\nexport const addImageToCollection = (collectionId, imageId) => async (dispatch) => {\r\n  try{\r\n        await axios.post(`https://api.unsplash.com/collections/${collectionId}/add`,      \r\n          { photo_id: imageId },\r\n          {\r\n              headers: {\r\n                  Authorization: `Bearer ${ACCESS_TOKEN}`\r\n              }\r\n          }\r\n      );\r\n      dispatch(setMessage({title: 'Atención', message:  \"La imagen ha sido agregada de la colección exitosamente.\", type: 'success'}))\r\n      dispatch(setRefresh({refresh: true}))\r\n      dispatch(setShowSpinner({label1: 'Estamos actualizando el listado de colecciones.', label2: 'Esto podría tardar unos segundos...'}))\r\n      \r\n  }catch(error){\r\n    if(error.status === 403){\r\n      dispatch(setMessage({title: 'Error', message:  \"Se ha excedido el máximo de peticiones. Intentalo más tarde.\", type: 'danger'}))\r\n    }else{\r\n      dispatch(setMessage({title: 'Error', message:  \"Error al agregar la imágen a la colección:\" + error.message, type: 'danger'}))\r\n    }\r\n  }\r\n}\r\n\r\nexport const removeImageFromCollection = (collectionId, imageId) => async (dispatch) => {\r\n  try{\r\n        await axios.delete(`https://api.unsplash.com/collections/${collectionId}/remove`,\r\n          {\r\n              headers: {\r\n                  Authorization: `Bearer ${ACCESS_TOKEN}`\r\n              },\r\n              data: {\r\n                photo_id: imageId\r\n              }\r\n          }\r\n      );\r\n      //dispatch(setRemoveFromCollection({collectionId}))\r\n      dispatch(setMessage({title: 'Atención', message:  \"La imagen ha sido eliminada de la colección.\", type: 'success'}))\r\n      dispatch(setRefresh({refresh: true}))\r\n      dispatch(setShowSpinner({label1: 'Estamos actualizando el listado de colecciones.', label2: 'Esto podría tardar unos segundos...'}))\r\n\r\n  }catch(error){\r\n    if(error.status === 403){\r\n      dispatch(setMessage({title: 'Error', message:  \"Se ha excedido el máximo de peticiones. Intentalo más tarde.\", type: 'danger'}))\r\n    }else{\r\n      dispatch(setMessage({title: 'Error', message:  \"Error al intentar eliminar la imágen de la colección:\" + error.message, type: 'danger'}))\r\n    }\r\n  }\r\n}\r\n\r\nexport const createCollection = (title, description = '', isPrivate = false) => async (dispatch) => {\r\n  try{\r\n    await axios.post('https://api.unsplash.com/collections',\r\n      {\r\n          title: title,\r\n          description: description,\r\n          private: isPrivate\r\n      },\r\n      {\r\n          headers: {\r\n              Authorization: `Bearer ${ACCESS_TOKEN}`,\r\n              'Content-Type': 'application/json',\r\n              'Cache-Control': 'no-cache'\r\n          }\r\n      }\r\n    );\r\n    dispatch(setMessage({title: 'Atención', message:  \"Colección creada exitosamente\", type: 'success'}))\r\n    dispatch(setRefresh({refresh: true}))\r\n    dispatch(setShowSpinner({label1: 'Estamos actualizando el listado de colecciones.', label2: 'Esto podría tardar unos segundos...'}))\r\n  }catch(error){\r\n    if(error.status === 403){\r\n      dispatch(setMessage({title: 'Error', message:  \"Se ha excedido el máximo de peticiones. Intentalo más tarde.\", type: 'danger'}))\r\n    }else{\r\n      dispatch(setMessage({title: 'Error', message:  \"Error al crear la colección:\" + error.message, type: 'danger'}))\r\n    }\r\n  }\r\n}\r\n\r\nexport const getAllCollections = (page = 1) => async (dispatch)  => {\r\n  try{\r\n    const response = await axios.get('https://api.unsplash.com/users/marcelo_b/collections', {\r\n      params: {\r\n        per_page: 9, \r\n        page\r\n      },\r\n      headers: {\r\n        Authorization: `Bearer ${ACCESS_TOKEN}`\r\n      },\r\n    });\r\n    dispatch(setAllCollections({data: response.data}))\r\n    \r\n  }catch(error){\r\n    if(error.status === 403){\r\n      dispatch(setMessage({title: 'Error', message:  \"Se ha excedido el máximo de peticiones. Intentalo más tarde.\", type: 'danger'}))\r\n    }else{\r\n      dispatch(setMessage({title: 'Error', message:  \"Error al obtener las colecciones:\" + error.message, type: 'danger'}))\r\n    }\r\n  }\r\n}\r\n\r\nexport const getCollectionPhotos = (id, page=1) => async (dispatch) => {\r\n  try{\r\n    const response = await axios.get(`https://api.unsplash.com/collections/${id}/photos`, {\r\n      params: {\r\n        per_page: 20, \r\n        page\r\n      },\r\n      headers: {\r\n        Authorization: `Bearer ${ACCESS_TOKEN}`\r\n      },\r\n    });\r\n    \r\n    dispatch(setCollectionPhotos({photos: response.data}))\r\n  }catch(error){\r\n    if(error.status === 403){\r\n      dispatch(setMessage({title: 'Error', message:  \"Se ha excedido el máximo de peticiones. Intentalo más tarde.\", type: 'danger'}))\r\n    }else{\r\n      dispatch(setMessage({title: 'Error', message:  \"Error al obtener las fotos de la colección:\" + error.message, type: 'danger'}))\r\n    }\r\n  }\r\n}\r\n\r\n","import React from 'react'\r\nimport { HomePageLogic } from './HomePage.logic.jsx'\r\nimport searchIcon from '../../assets/Search.svg'\r\nimport './homePage.css'\r\n\r\nconst HomePage = () => {\r\n  const { searchValue, divStyle, handlerSearchChange, handlerSearchImage } = HomePageLogic()\r\n  \r\n  return (\r\n    <div className='div-background' style={divStyle}>\r\n      <div className='row form'>\r\n        <div>\r\n          <h1 form='input-search' >Search</h1>\r\n        </div>\r\n        <div className='div-home-containers'>\r\n          <label form='input-search' >Search high-resolution images Unsplash</label>\r\n        </div>\r\n        <div className='div-home-containers input-container'>\r\n          <input \r\n            id=\"input-search\" \r\n            type=\"input\" \r\n            className=\"form-control\" \r\n            value={searchValue}\r\n            onChange={e => handlerSearchChange(e)}\r\n            onKeyDown={handlerSearchImage}\r\n            placeholder='Enter your keywords...'\r\n          />\r\n          <img src={searchIcon} alt=\"Buscar\" className=\"search-icon\"/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HomePage","import { useEffect, useState } from 'react'\r\nimport { search } from '../../actions/search.jsx'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport bgImage from '../../assets/hero-image.png'\r\n\r\n\r\nexport const HomePageLogic = () => {\r\n  const divStyle = { backgroundImage: 'url(' + bgImage + ')'};\r\n  const [ searchValue, setSearchValue ] = useState('')\r\n  const state = useSelector(state => state.searchSlice)\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    //Sólo si la búsqueda retorno resultado con imágen(es), se redirecciona a la página \r\n    //de resultado de búsqueda, si no se han encontrado imágenes no se redirecciona\r\n    if(state.result.length > 0){  \r\n      navigate('/search_result')\r\n    }\r\n    // eslint-disable-next-line\r\n  },[state])\r\n\r\n  //Función asociada al evento onChange del cuadro de texto de búsqueda\r\n  const handlerSearchChange = (e) => {\r\n    setSearchValue(e.target.value)\r\n  }\r\n\r\n  //Llama a la funicón que hace la llamada a la API de unsplash para realizar la búsqueda de lka imágen, solo al presionar ENTER\r\n  const handlerSearchImage = (e) => {\r\n    if(e.keyCode === 13){\r\n      dispatch(search(searchValue))\r\n    }\r\n  }\r\n\r\n  return ({ searchValue, divStyle, handlerSearchChange, handlerSearchImage })\r\n}","import React from \"react\";\r\nimport Logo from \"../../assets/Logo.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { MainNavBarLogic } from \"./MainNavBar.logic\";\r\nimport \"./mainNavBar.css\";\r\n\r\n\r\nconst MainNavBar = () => {\r\n  const { isActive, goToHome } = MainNavBarLogic()\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg bg-body-tertiary\">\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          <img src={Logo} alt=\"logo\" />\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarText\"\r\n          aria-controls=\"navbarText\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n          <ul className=\"navbar-nav ms-auto mb-2 mb-lg-0\">\r\n           <li className=\"nav-item\">\r\n              <Link className={\"nav-link \" + (isActive(\"/\") || isActive(\"/search_result\"))} aria-current=\"page\" to=\"/\" onClick={e => goToHome()}>\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className={\"nav-link \" + isActive(\"/collections\")} to=\"/collections\">\r\n                Collections\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default MainNavBar;\r\n","import { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { clearResult } from \"../../redux/slices/searchSlice\";\r\n\r\nexport const MainNavBarLogic = () => {\r\n  const dispatch = useDispatch()\r\n  const location = useLocation();\r\n  const navigate = useNavigate()\r\n\r\n  //Permite resaltar elbotón activo en el menú de navegación\r\n  const isActive = (URI) => {\r\n    return location.pathname === URI ? \"active\" : \"\"\r\n  }\r\n\r\n  //Maneja el evento click del botón home del menú de navegación\r\n  const goToHome = () => {\r\n    dispatch(clearResult())  \r\n    navigate('/')  \r\n  }\r\n\r\n  return ({ isActive, goToHome });\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getPhoto } from \"../../actions/search\";\r\n\r\nimport './imgCard.css'\r\n\r\n//Componente para mostrar que muestra la foto dentro del componente imagenesCollection, en las páginas de \r\n//resultado de búsqueda y imagenes de la colección\r\nconst ImgCard = (props) => {\r\n  const selectedImage = useSelector(state => state.SelectedImageSlice.image)\r\n  const [ redirect, setRedirect ] = useState(false)\r\n  const navigate = useNavigate()\r\n  const dispatch = useDispatch()\r\n  const img = props.img;\r\n\r\n  useEffect(() => {\r\n    if(selectedImage && redirect){\r\n      navigate('/image_detail') //Redirige a la página de detalle de la imagen\r\n      setRedirect(false)\r\n    }\r\n    // eslint-disable-next-line\r\n  },[selectedImage])\r\n\r\n  //Al hacer click sobre el componente, configura la constante redirect para redireccionar \r\n  //a la página de detalle de la imagen, a penas se reciban desde el store los datos de la imágen seleccionada\r\n  const handlerDetailImageClick = (id) => {\r\n    setRedirect(true)\r\n    dispatch(getPhoto(id))\r\n  }\r\n  \r\n  return (\r\n    <div className=\"card img-card\" onClick={e => handlerDetailImageClick(img.id)}>\r\n      <img\r\n        src={img.urls.regular}\r\n        alt={img.description}\r\n        className=\"card-img-top\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImgCard;\r\n","import React from \"react\";\r\nimport { ImagesCollectionsLogic } from \"./ImagesCollections.logic\";\r\nimport ImgCard from \"../imgCard/ImgCard\";\r\nimport \"./imagesCollections.css\";\r\n\r\n\r\n//Componente que muestra una grilla de imágenes utilizado en las páginas de resultado de búsqueda de imágenes y \r\n//en la página de imágenes pertenecientes a una colección\r\nconst ImagesCollections = ({data, clear = false}) => {\r\n  const { images } = ImagesCollectionsLogic(data, clear)\r\n\r\n  return (\r\n    <>\r\n      {images && images.length > 0 && (\r\n        <div className=\"container-results\">\r\n          {images.map((col, i) => (\r\n\r\n            <div key={i} className=\"col\">\r\n              {col.map((img, y) => (\r\n                <ImgCard key={y} img={img} />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ImagesCollections;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const ImagesCollectionsLogic = (data, clear) => {\r\n  const [ windowWidth, setWindowWidth ] = useState(window.innerWidth);\r\n  const [ columnas, setColumnas ] = useState(parseInt(windowWidth / 288))\r\n  const [ dataArr, setDataArr ] = useState([])\r\n  const [ images, setImages ] = useState([])\r\n  const [ result, setResult ] = useState([])\r\n  \r\n  useEffect(() => {\r\n    // Función para actualizar el ancho de la ventana\r\n    const handleResize = () => setWindowWidth(window.innerWidth);\r\n    // Agrega el evento 'resize' al cargar el componente\r\n    window.addEventListener('resize', handleResize);\r\n    // Limpia el evento al desmontar el componente\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n\r\n  //Calcula cuantas columnas de imágenes deben mostrarse en pantalla de acuerdo al ancho de la pantalla\r\n  useEffect(() => {\r\n    setColumnas(parseInt(windowWidth / 288))\r\n  },[windowWidth])  \r\n\r\n  useEffect(() => {\r\n    setImages([])\r\n    setDataArr([])\r\n    setResult(data ?? [])\r\n  },[data])\r\n\r\n\r\n  //crea un array popr columna de imágenes a mostrar, que contiene las imágenes a mostrar por cada columna\r\n  useEffect(() => {\r\n    if(result.length > 0 && data){\r\n        const imagenesPorColumna = Math.ceil(data.length / columnas)\r\n        const dataColumna = result.slice(0, imagenesPorColumna)\r\n        setDataArr([...dataArr, dataColumna])\r\n        if(result.length > imagenesPorColumna){\r\n            setResult(result.slice(imagenesPorColumna))\r\n        }\r\n    }\r\n    // eslint-disable-next-line\r\n  },[result])\r\n\r\n  \r\n  useEffect(() => {\r\n    //Cuando se detecta que la totalidad de las imágenes han sido agregadas a los arrays de las columnas a mostrar, \r\n    //entonces de asigna a la constante \"images\" el array con las columnas de imágenes\r\n    if(dataArr.reduce( (acum, value) => acum + value.length, 0) === data.length){\r\n      setImages(dataArr)\r\n    }\r\n    // eslint-disable-next-line\r\n  },[dataArr])\r\n\r\n  //Limpia el array con las imágenes a mostrar\r\n  useEffect(() => {\r\n    if(clear){\r\n      setImages([])\r\n    }\r\n  },[clear])\r\n\r\n  return ({ images });\r\n}","import React from 'react'\r\nimport ImagesCollections from '../../components/imagesCollections/ImagesCollections'\r\nimport { SearchResultPageLogic } from './SearchResultPage.logic'\r\nimport searchIcon from '../../assets/Search.svg'\r\nimport './searchResultPage.css'\r\n\r\n\r\n//Página con el resultado de la búsqueda\r\nconst SearchResultPage = () => {\r\n    const { divStyle, state, images, criteria, handlerInputSearchChange, handlerInputCriteriaKeyDown} = SearchResultPageLogic()\r\n    \r\n  return (\r\n    <div className='container-page' >\r\n        <div style={divStyle} className='top-gradient'></div>\r\n        <div className='form-search' >\r\n            <div className='search-in-result-page'>\r\n                <input \r\n                    type='text' \r\n                    className='form-control input-search' \r\n                    value={criteria} \r\n                    placeholder='Enter your keywords...'\r\n                    name=\"inputSearch\"\r\n                    onChange={e => handlerInputSearchChange(e)}\r\n                    onKeyDown={handlerInputCriteriaKeyDown}\r\n                /> \r\n                <img src={searchIcon} alt=\"Buscar\" className=\"search-icon\"/>   \r\n            </div>\r\n        </div>\r\n\r\n        <ImagesCollections data={state.result} clear={images.length === 0}/>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchResultPage","import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { search } from '../../actions/search'\r\nimport bgImage from '../../assets/gradiend-bg.svg'\r\n\r\n\r\nexport const SearchResultPageLogic = () => {\r\n    const divStyle = { backgroundImage: 'url(' + bgImage + ')'}\r\n    const state = useSelector(state => state.searchSlice)\r\n    const [ images, setImages ] = useState([])\r\n    const [ criteria, setCriteria ] = useState('');\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        /*\r\n        El texto de búsqueda se persiste en el store. Si el store ya contiene \r\n        un texto almacenado, la constante criteria, asociada al cuadro de búsqueda, \r\n        se actualiza automáticamente. Esto garantiza que el texto almacenado se \r\n        muestre en el cuadro de búsqueda al cargar la página.\r\n        */\r\n        setCriteria(state.criteria) \r\n    },[state])\r\n    \r\n\r\n    //Función para el evento onChange del cuadro de texto de búsqueda\r\n    const handlerInputSearchChange= (e) => {\r\n        setCriteria(e.target.value)        \r\n    }\r\n\r\n    //Función para elevento keyDown del cuadro de texto de búsqueda\r\n    const handlerInputCriteriaKeyDown = (e) => {\r\n        //Si se presiona ENTER se llama a la función que realiza la petición a unsplash para la búsqueda de la(s) imagen(es)\r\n        if(e.keyCode === 13){\r\n            setImages([])\r\n            dispatch(search(criteria))\r\n        }\r\n    }\r\n    \r\n  return ({ divStyle, state, images, criteria, handlerInputSearchChange, handlerInputCriteriaKeyDown})\r\n}","import React from 'react'\r\nimport imgNotFound from '../../assets/image_not_found.png'\r\n\r\nimport './rowGridCollection.css'\r\n\r\n\r\nconst RowGridCollection = React.memo(({item, info, rowId, isActive, handlerSetActive, handlerAction, textAction, iconAction}) => {\r\n        \r\n  return (\r\n    <div className={'row custom-row ' + (isActive ? 'active' : '')} onClick={() => handlerSetActive(rowId)}>\r\n        <div className='col img-col'>\r\n            <div className='div-small-image'>\r\n                <img\r\n                    src={item.cover_photo? item.cover_photo.urls.small : imgNotFound}\r\n                    alt={item.title}\r\n\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className='col info-col'>\r\n            <div className='row'>\r\n                <label className='info-col-title'>{item.title}</label>\r\n            </div>\r\n            <div className='row'>\r\n                <label className='info-col-info'>{info}</label>\r\n            </div>\r\n        </div>\r\n        <div className=\"col col-remove\" onClick={() => handlerAction(item.id)}>\r\n            <img className=\"remove-class\" src={iconAction} alt={textAction}/> {textAction}\r\n        </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default RowGridCollection","import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addImageToCollection, createCollection, getUserCollections } from '../../actions/search'\r\nimport { setMessage } from '../../redux/slices/messageSlice'\r\nimport { hideSpinner, setShowSpinner } from '../../redux/slices/spinnerSlice';\r\n\r\n\r\n//Logica para el modal que contiene el listado de colecciones en las cuales se puede agregar una imágen \r\n//(mostrado en la página de detalle de la imágen)\r\nexport const ModalAddToCollectionLogic = (closeModal, imageId) => {\r\n    const collection = useSelector(state => state.CollectionSlice.notInCollection)  //Array con las colecciones en las que se encuentra agregada la imágen    \r\n    const visible = useSelector(state => state.spinnerSlice.visible)  //Obtiene el valor que indica si el spinner se encuentra visible o no\r\n    const [ value, setValue ] = useState('')    //Texto del cuadro de texto buscar colección\r\n    const [ idActiveRow, setIdActiveRow ] = useState(null)  //ID de la colección seleccionada desde el listado de colecciones\r\n    const [ dataCollection, setDataCollection ] = useState(null)    //Listado que contiene las colecciones existentes en la constante \"collection\", cuyo nombre coincida con el valor de la constante \"value\"\r\n    const [ prevCollection, setPrevCollection ] = useState(null)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(imageId){\r\n            dispatch(getUserCollections(imageId, false))    //Obtiene la colección de imágenes donde la imágen NO se encuentra agregada (argumento false)\r\n        }\r\n        // eslint-disable-next-line\r\n    },[imageId])\r\n\r\n\r\n    useEffect(() => {\r\n        if(visible){\r\n            const timer = setTimeout(() => {\r\n                dispatch(hideSpinner())\r\n                dispatch(getUserCollections(imageId))\r\n            }, 5000);\r\n        \r\n            return () => clearTimeout(timer)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [visible])\r\n    \r\n\r\n    //Busca una colección con el texto ingresado en el cuadro de texto, cada vez que el cuadro de texto cambia su valor\r\n    useEffect(() => {\r\n        if(prevCollection !== null && JSON.stringify(prevCollection) === JSON.stringify(collection)){\r\n            dispatch(setShowSpinner({label1: 'Estamos actualizando el listado de colecciones.', label2: 'Esto está tardando más de los esperado, pero ya falta poco...'}))\r\n        }else{\r\n            setPrevCollection(null)\r\n            setDataCollection(collection.filter(e => e.title.includes(value)))\r\n        }\r\n        // eslint-disable-next-line\r\n    },[collection, value])\r\n\r\n    //Evento del cuadro de texto de búsqueda de colecciones\r\n    const handlerChangeValue = (e) => {\r\n        setValue(e.target.value)\r\n    }\r\n    \r\n    //Configura, en la constante \"active\", el código de la colección seleccionada por el usuario desde la lista de colecciones\r\n    //Param id: código de la colección seleccionada por el usuario\r\n    const handlerSetActive = (id) => {\r\n        setIdActiveRow(id)\r\n    }\r\n\r\n    //Función para el evento Click, en el cual se agrega una imágen a la colección seleccionada por el usuario\r\n    //Param id: código de la colección a la que se agregará la imágen\r\n    const handlerGridAction = (id) => {\r\n        setPrevCollection([...collection])\r\n        dispatch(addImageToCollection(id, imageId))        \r\n        closeModal()\r\n    }\r\n\r\n    //Función asociada al evento click, para crear una nueva colección\r\n    const handlerNewCollection = () => {\r\n        if(value !== ''){\r\n            setPrevCollection([...collection])\r\n            dispatch(createCollection(value))\r\n        }else{\r\n            dispatch(setMessage({title: 'Error', message:  \"Debe ingresar el nombre de la colección.\", type: 'danger'}))\r\n        }\r\n    }\r\n    \r\n  return ({ \r\n        value, \r\n        idActiveRow, \r\n        dataCollection, \r\n        handlerChangeValue, \r\n        handlerSetActive, \r\n        handlerGridAction, \r\n        handlerNewCollection\r\n    })\r\n}","import React from 'react'\r\nimport RowGridCollection from '../rowGridCollection/RowGridCollection'\r\nimport { ModalAddToCollectionLogic } from './ModalAddToCollection.logic'\r\nimport plusIcon from '../../assets/Plus.svg'\r\nimport './addToCollection.css'\r\n\r\nconst ModalAddToCollection = ({show, closeModal, imageId}) => {\r\n    const { \r\n        value, idActiveRow, dataCollection, //Constantes\r\n        handlerChangeValue, handlerSetActive, handlerGridAction, handlerNewCollection   //funciones\r\n    } = ModalAddToCollectionLogic(closeModal, imageId)\r\n   \r\n  return (\r\n    <>\r\n    {show && \r\n        <div className='modal-container'>\r\n            <div className='modal-background' onClick={closeModal}></div>            \r\n            <div className='modal-form'>\r\n                <h4>Add to Collections</h4>\r\n                <div className='row'>\r\n                    <input \r\n                        type=\"text\" \r\n                        className='form-control' \r\n                        value={value}\r\n                        onChange={e => handlerChangeValue(e)}\r\n                        placeholder='collection name to search for'\r\n                    />\r\n                </div>\r\n                <div className='row info-add-collection'>\r\n                     <div className='p-info-count-matches col'>\r\n                     {dataCollection && <p>  {dataCollection.length} matches </p>}\r\n                    </div>\r\n                    <div className='col btn-new-collection'> \r\n                        {dataCollection && dataCollection.length === 0 && \r\n                            <label onClick={() => handlerNewCollection()}><img src={plusIcon} alt=\"Nueva colección\"/>Create Collection</label>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className='list-collection-modal-container'>\r\n                    <div className='list-collection-modal'>\r\n                        {dataCollection && dataCollection.map((item, key) => \r\n                            <RowGridCollection\r\n                                key={key}\r\n                                item={item}\r\n                                rowId={key} \r\n                                info={item.total_photos + \" photos\"}\r\n                                isActive={idActiveRow === key}\r\n                                handlerSetActive={handlerSetActive}\r\n                                handlerAction={handlerGridAction}\r\n                                textAction={'Add to Collection'}\r\n                                iconAction={plusIcon}\r\n                            />\r\n                            \r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ModalAddToCollection","import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { downloadImage, getUserCollections, removeImageFromCollection } from '../../actions/search'\r\nimport { hideSpinner, setShowSpinner } from '../../redux/slices/spinnerSlice';\r\nimport { clearResult } from '../../redux/slices/searchSlice';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nexport const ImagesDetailPageLogic = () => {\r\n    const [ idActiveRow, setIdActiveRow ] = useState(null)  //Almacena eel código de la colección seleccionada por el usuario para luego poder ´manipular esa colección\r\n    const visible = useSelector(state => state.spinnerSlice.visible)  //Obtiene el valor que indica si el spinner se encuentra visible o no\r\n    const [ showModalAddToCollection, setshowModalAddToCollection ] = useState(false)\r\n    const [ prevCollection, setPrevCollection ] = useState(null)\r\n    const image = useSelector(state => state.SelectedImageSlice.image)\r\n    const collections = useSelector(state => state.CollectionSlice.inCollection)\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    \r\n    useEffect(() => {\r\n        if(image){\r\n            dispatch(getUserCollections(image.id))    //Obtiene la colección de imágenes donde la imágen se encuentra agregada (argumento true)\r\n        }else{\r\n            navigate('/')   //Si no se recibe una imágen, entonces se redirecciona a la págima home\r\n        }\r\n        dispatch(clearResult()) //Borra el resultado de la búsqueda y el criterio de búsqueda del store (searchSlice)\r\n        // eslint-disable-next-line\r\n    },[image])\r\n\r\n\r\n    //Se encarga de actualizar el listado de colecciones en las cuales la imágenes se encuentra agregada\r\n    //Se realiza con un retraso de 5 segundos ya que el API de unsplash no actualiza inmediatamente las colecciones\r\n    //Este hook sólo se ejecuta si el spinner se encuentra visible\r\n    useEffect(() => {\r\n        if(visible){\r\n            const timer = setTimeout(() => {\r\n                dispatch(hideSpinner())\r\n                dispatch(getUserCollections(image.id))    //Obtiene la colección de imágenes donde la imágen se encuentra agregada (argumento true)\r\n            }, 5000);\r\n        \r\n            return () => clearTimeout(timer)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [visible])\r\n\r\n    //Compara el contenido de las colección de imágenes antes de agregar la imágen y con el listado recibido desde unsplash \r\n    //después de haber agregado la imágen a una colección, si el contenido es igual, quiere significa que unsplash no ha \r\n    //actualizado aún las colecciones, con lo que se muestra nuevamente el spinner para hacer una nueva petición de colecciones\r\n    //desde unsplash\r\n    useEffect(() => {\r\n        if(prevCollection !== null && JSON.stringify(prevCollection) === JSON.stringify(collections)){\r\n            dispatch(setShowSpinner({label1: 'Estamos actualizando el listado de colecciones.', label2: 'Esto está tardando más de los esperado, pero ya falta poco...'}))\r\n        }\r\n        // eslint-disable-next-line\r\n    },[collections])\r\n\r\n\r\n    //Finalidad retornar un string con la fecha en formato nombre mes día año completo\r\n    const getMonthAndYear = () => {\r\n        const fecha = new Date(image.created_at)\r\n        const nombreMes = fecha.toLocaleString('es-ES', { month: 'long' }); // 'long' para el nombre completo del mes\r\n        return nombreMes + ' ' + fecha.getDate() + ', ' + fecha.getFullYear()\r\n    }\r\n\r\n    //Configura el codigo de la colección seleccionada en la constante activeRow\r\n    const handlerSetActive = (id) => {\r\n        setIdActiveRow(id)\r\n    }\r\n\r\n    //Eventyo del botón decargar imágen\r\n    const handlerDownload = () => {\r\n        const imageName = (image.description ? image.description  : 'unsplash-image')\r\n        dispatch(downloadImage(image.id, imageName))\r\n    }\r\n\r\n    //Evento del botón eliminar imágen de una colección\r\n    const handlerRemoveAction = (id) => {\r\n        setPrevCollection([...collections])\r\n        dispatch(removeImageFromCollection(id, image.id))\r\n    }\r\n\r\n    //Evento del botón agregar imágen a una colección\r\n    const handlerAddToCollection = () => {\r\n        setshowModalAddToCollection(!showModalAddToCollection)  //Muestra el modal con un listado de colecciones para seleccionar\r\n    }\r\n\r\n    //Evento del botón cerrar modal\r\n    const handlerCloseModal = () => {\r\n        setshowModalAddToCollection(false)\r\n    }\r\n\r\n  return ({  \r\n        idActiveRow, \r\n        showModalAddToCollection, \r\n        image, \r\n        collections, \r\n        getMonthAndYear, \r\n        handlerSetActive, \r\n        handlerDownload, \r\n        handlerRemoveAction, \r\n        handlerAddToCollection, \r\n        handlerCloseModal\r\n    })\r\n}","import React from 'react'\r\nimport RowGridCollection from '../../components/rowGridCollection/RowGridCollection'\r\nimport ModalAddToCollection from '../../components/addToCollection/ModalAddToCollection'\r\nimport { ImagesDetailPageLogic } from './ImagesDetailPage.logic'\r\nimport downArrowIcon from '../../assets/down arrow.svg'\r\nimport plusIcon from '../../assets/Plus.svg'\r\nimport removeIcon from '../../assets/Remove.svg'\r\nimport './imagesDetailPage.css'\r\n\r\n//Página con el detalle de la imágen seleccionada por el usuario\r\nconst ImagesDetailPage = () => {\r\n    const { \r\n            idActiveRow, \r\n            showModalAddToCollection, \r\n            image, \r\n            collections, \r\n            getMonthAndYear, \r\n            handlerSetActive, \r\n            handlerDownload, \r\n            handlerRemoveAction, \r\n            handlerAddToCollection, \r\n            handlerCloseModal\r\n        } = ImagesDetailPageLogic()\r\n\r\n  return (\r\n    <>\r\n        {image && <ModalAddToCollection show={showModalAddToCollection} closeModal={handlerCloseModal} imageId={image.id}/>}\r\n        {image && \r\n        <div className='row container-details-image'>\r\n            <div className='col'>\r\n                {image && <img \r\n                    className='detail-fullimage'\r\n                    src={image.urls.full}\r\n                    alt={image.alt_description}\r\n                />}\r\n            </div>\r\n            <div className='col'>\r\n                <div className='row'>\r\n                    <div>\r\n                        <img \r\n                            className='user-avatar'\r\n                            src={image.user.profile_image.small}\r\n                            alt=\"Avatar usuario\"\r\n                        />\r\n                        <span className='user-name-span'>\r\n                            {image.user.name}\r\n                        </span>\r\n                    </div>\r\n                    <div className='div-user-info'>\r\n                        <p className='info published-on'>Published on {getMonthAndYear()}</p>\r\n                    </div>\r\n                    <div className='row'>\r\n                            <button className='btn btn-link-light my-grey-button' onClick={() => handlerAddToCollection()}>\r\n                                <img src={plusIcon} alt=\"+\"/> Add to Collection\r\n                            </button>\r\n                            <button className='btn btn-link-light my-grey-button' onClick={e => handlerDownload()}>\r\n                                <img src={downArrowIcon} alt=\"|\"/>Download\r\n                            </button>\r\n                    </div>                \r\n                </div>\r\n                <div className='container collections-container'>\r\n                    <h4>Collections</h4>\r\n                    <div className='list-collection'>\r\n                        {collections && collections.map((item, key) => {\r\n                            return <RowGridCollection\r\n                                        key={key}\r\n                                        item={item}\r\n                                        rowId={key} \r\n                                        info={item.total_photos + \" photos\"}\r\n                                        isActive={idActiveRow === key}\r\n                                        handlerSetActive={handlerSetActive}\r\n                                        handlerAction={handlerRemoveAction}\r\n                                        textAction={'Remove from Collection'}\r\n                                        iconAction={removeIcon}\r\n                                    />\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ImagesDetailPage","import React from 'react'\r\nimport { CardCollectionPreviewLogic } from './CardCollectionPreview.logic'\r\nimport imgNotFound from '../../assets/image_not_found.png'\r\nimport './cardCollectionPreview.css'\r\n\r\n//Muestra uuna tarjeta, por cada colección, con 1 2 ó 3 vistas previas de las imágenes contenidas en la colección\r\nconst CardCollectionPreview = ({data}) => {\r\n    const { capitalCase, handlerClickCard } = CardCollectionPreviewLogic(data)\r\n\r\n  return (\r\n    <div className='col collection-card' onClick={() => handlerClickCard()}>\r\n        <div className='row'>\r\n            <div className={'col img-left ' + (data.total_photos <= 1 ? 'una-foto' : (data.total_photos === 2 ? 'dos-fotos' : 'tres-fotos'))}>\r\n                <img\r\n                    className={data.total_photos <= 1 ? 'una-foto' : (data.total_photos === 2 ? 'dos-fotos' : 'tres-fotos')}\r\n                    src={data.preview_photos ? data.preview_photos[0].urls.small : imgNotFound}\r\n                    alt={data.title}\r\n                />\r\n            </div>\r\n            {data.total_photos === 2 && <div className='col img-right-1'>\r\n                <img\r\n                    className={(data.total_photos > 2 ? 'tres-fotos' : '')}\r\n                    src={data.preview_photos ? data.preview_photos[1].urls.small : imgNotFound}\r\n                    alt={data.title}\r\n                />\r\n            </div>}\r\n            {data.total_photos >= 3 &&  <div className='col img-right-2'>\r\n                <div className='row'>\r\n                    <img\r\n                        className='img-1'\r\n                        src={data.preview_photos ? data.preview_photos[1].urls.small : imgNotFound}\r\n                        alt={data.title}\r\n                    />\r\n                </div>\r\n                <div className='row'>\r\n                    <img\r\n                        className='img-2'\r\n                        src={data.preview_photos ? data.preview_photos[2].urls.small : imgNotFound}\r\n                        alt={data.title}\r\n                    />\r\n                </div>\r\n            </div>}\r\n        </div>\r\n        <label className='row lbl-nombre'>{capitalCase(data.title)}</label>\r\n        <label className='row lbl-info'>{data.total_photos} photos</label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardCollectionPreview","import { useNavigate } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setData } from '../../redux/slices/selectedCollectionSlice'\r\n\r\nexport const CardCollectionPreviewLogic = (data) => {\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n\r\n    const capitalCase = (text) => {\r\n        const label = text.substring(0,1).toUpperCase() + text.substring(1).toLowerCase()\r\n        return label\r\n    }\r\n\r\n    //Función de evento click que redirecciona a la página que muestra las fotos que contiene la colección relacionada a la tarjeta\r\n    const handlerClickCard = () => {\r\n        dispatch(setData({id: data.id, title: data.title, cantPhotos: data.total_photos}))\r\n        navigate('/collection_photos/'+data.id)\r\n    }\r\n\r\n  return ({ capitalCase, handlerClickCard })\r\n}","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getAllCollections } from '../../actions/search'\r\nimport CardCollectionPreview from '../../components/cardCollectionPreview/CardCollectionPreview'\r\nimport './collectionPage.css'\r\n\r\n//Página que muestra las Cards en las que se visualizan las vistas previas de las imágenes \r\n//contenidas en cada una de las colecciones\r\nconst CollectionPage = () => {\r\n    const collection = useSelector(state=> state.CollectionSlice.allCollections)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllCollections())\r\n        // eslint-disable-next-line\r\n    },[])\r\n\r\n  return (\r\n    <div className='row container-page collection-container-page'>\r\n        <div className='title-container'>\r\n            <div></div>\r\n                <div className='title'>\r\n                    <h1 className='texto-gradiente'>Collections</h1>\r\n                    <label>Explore the world through collections of beatifull<br/>\r\n                    photos free to use under the <span className='bold-underline'>Unsplash License</span>.</label>\r\n                </div>\r\n            <div></div>\r\n        </div>\r\n        {collection && collection.map((elem, key) => \r\n            <CardCollectionPreview\r\n                key={key}                \r\n                data={elem}\r\n            />\r\n        )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CollectionPage","import React, { useEffect } from 'react'\r\nimport ImagesCollections from '../../components/imagesCollections/ImagesCollections'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getCollectionPhotos } from '../../actions/search'\r\nimport { useParams } from 'react-router-dom'\r\n\r\n//Página que muestra las fotos contenidas en la colección seleccionada en la página collectionPage\r\nconst CollectionPhotosPage = () => {\r\n  const { id } = useParams()\r\n  const {title, cantPhotos, photos } = useSelector(state => state.SelectedCollectionSlice)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(getCollectionPhotos(id))\r\n    // eslint-disable-next-line\r\n  },[id])\r\n\r\n  return (\r\n    <div className='collection-container-page'>\r\n        <div className='title-container'>\r\n        \r\n            <div className='title'>\r\n                <h1 className='texto-gradiente'>{title}</h1>\r\n                <label>{cantPhotos} photos</label>\r\n            </div>\r\n            \r\n        </div>\r\n        {photos && <ImagesCollections data={photos}/>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CollectionPhotosPage","import React from 'react'\r\nimport { AlertComponentLogic } from './AlertComponent.logic'\r\nimport './AlertComponent.css'\r\n\r\nconst AlertComponent = ({id, title, message, type='success',}) => {\r\n    const { showAlert, progress, alertRef, darkenColor, closeAlert } = AlertComponentLogic()\r\n    \r\n  return (\r\n        showAlert && \r\n        <div className={\"alert alert-\" + type + \" alert-dismissible fade show alert-compomnent\"} ref={alertRef}>\r\n            <strong>{title + ':'}</strong> {message}\r\n            <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={() => closeAlert(id)}></button>\r\n            <div className='rest-time' style={{\"width\": (progress) + \"%\", \"background\": darkenColor()}}/>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default AlertComponent","import { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeMessage } from '../../redux/slices/messageSlice';\r\n\r\nexport const AlertComponentLogic = () => {\r\n    const timeAlert = 10000\r\n    const [ showAlert, setShowAlert ] = useState()\r\n    const [progress, setProgress] = useState(100); // Estado inicial de la barra (100%)\r\n    const alertRef = useRef(null); // Referencia al componente de alerta\r\n    const dispatch = useDispatch()\r\n    \r\n\r\n    useEffect(() => {\r\n        // Configuración del intervalo de tiempo que reduce la barra de progreso en 1% cada 100 ms (10 segundos = 100 intervalos)\r\n        const interval = setInterval(() => {\r\n            setProgress((prev) => (prev > 0 ? prev - 1 : 0));\r\n        }, 100);\r\n\r\n        //Configuración del tiempo que permanecerá vicibe el componente de mensaje en pantalla\r\n        setShowAlert(true)\r\n        const alertInterval = setTimeout( () => closeAlert(), timeAlert)\r\n\r\n        //Clean up de los temporizadores\r\n        return () => {\r\n            clearTimeout(alertInterval)\r\n            clearInterval(interval)\r\n        }\r\n        // eslint-disable-next-line\r\n    },[])\r\n\r\n    const closeAlert = (id = 0) => {\r\n        setShowAlert(false)\r\n        dispatch(removeMessage({id}))\r\n    }\r\n\r\n\r\n    // Función para oscurecer un color en formato RGB\r\n    const darkenColor = () => {\r\n        if (alertRef.current) {\r\n            const factor = 0.2\r\n            const rgb = getComputedStyle(alertRef.current).backgroundColor;\r\n            \r\n            const match = rgb.match(/\\d+/g); // Extraer valores RGB\r\n            if (!match) return rgb;\r\n        \r\n            const [r, g, b] = match.map((value) =>\r\n            Math.max(0, Math.min(255, Math.floor(value * (1 - factor))))\r\n            );\r\n            return `rgb(${r}, ${g}, ${b})`;\r\n        }\r\n        return ''\r\n    };\r\n\r\n  return ({ showAlert, progress, alertRef, darkenColor, closeAlert })\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport AlertComponent from '../alertComponent/AlertComponent'\r\nimport './alertContainer.css'\r\n\r\nconst AlertContainer = () => {\r\n    const errors = useSelector(state => state.messageSlice)\r\n\r\n  return (\r\n    <div className='error-container'>\r\n        {errors && errors.map((err, key) => \r\n          <AlertComponent \r\n              key={key} \r\n              id={err.id}\r\n              title={err.title} \r\n              message={err.message} \r\n              type={err.type}\r\n          />        \r\n    )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AlertContainer","import React from 'react'\r\nimport './spinnerComponent.css'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst SpinnerComponent = () => {\r\n  const {visible, label1, label2 } = useSelector(state => state.spinnerSlice)\r\n\r\n\r\n  return (\r\n    visible && \r\n      <>      \r\n        <div className='spinner-background'/>      \r\n        <div className='spinner-container'>\r\n          <div className=\"spinner-border\"></div>\r\n          {(label1 || label2) && \r\n            <div className='spinner-label-container'>\r\n              {label1 && <label className='spinner-label-1'>{label1}</label>}\r\n              {label2 && <label className='spinner-label-2'>{label2}</label>}\r\n            </div>\r\n          }\r\n        </div>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default SpinnerComponent","import React, { useState } from 'react'\r\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\r\nimport PublicRoutes from './PublicRoutes'\r\nimport HomePage from '../pages/home/HomePage'\r\nimport MainNavBar from '../components/MainNavBar/MainNavBar.jsx'\r\nimport SearchResultPage from '../pages/searchResultPage/SearchResultPage.jsx'\r\nimport ImagesDetailPage from '../pages/imagesDetail/ImagesDetailPage.jsx'\r\nimport CollectionPage from '../pages/collectionPage/CollectionPage.jsx'\r\nimport CollectionPhotosPage from '../pages/collectionPhotosPage/CollectionPhotosPage.jsx'\r\nimport AlertContainer from '../components/alertContainer/AlertContainer.jsx'\r\nimport SpinnerComponent from '../components/spinnerComponent/SpinnerComponent.jsx'\r\n\r\nconst RoutesApp = () => {\r\n    // eslint-disable-next-line\r\n    const [ isLogued, setIsLogued ] = useState(false)\r\n    \r\n    return (\r\n                <BrowserRouter>\r\n                    <AlertContainer />\r\n                    <SpinnerComponent/>\r\n                    <MainNavBar/>\r\n                    <div className='navbar-space'></div>\r\n                    <Routes>\r\n                        {/*Rutas públicas*/}\r\n                        <Route exact path=\"/\" element={<PublicRoutes element={<HomePage/>} auth={isLogued}/>}/>\r\n                        <Route exact path=\"/home\" element={<PublicRoutes element={<HomePage/>} auth={isLogued}/>}/>\r\n                        <Route exact path=\"/search_result\" element={<PublicRoutes element={<SearchResultPage/>} auth={isLogued}/>}/>\r\n                        <Route exact path=\"/image_detail\" element={<PublicRoutes element={<ImagesDetailPage/>} auth={isLogued}/>}/>\r\n                        <Route exact path=\"/collections\" element={<PublicRoutes element={<CollectionPage/>} auth={isLogued}/>}/>\r\n                        <Route exact path=\"/collection_photos/:id\" element={<PublicRoutes element={<CollectionPhotosPage/>} auth={isLogued}/>}/>\r\n                    </Routes>\r\n                </BrowserRouter>\r\n            )\r\n}\r\n\r\nexport default RoutesApp","import { configureStore } from '@reduxjs/toolkit'\r\nimport searchSlice from './slices/searchSlice'\r\nimport messageSlice from './slices/messageSlice'\r\nimport SelectedImageSlice from './slices/selectedImageSlice'\r\nimport CollectionSlice from './slices/collectionsSlice'\r\nimport SelectedCollectionSlice from './slices/selectedCollectionSlice'\r\nimport spinnerSlice from './slices/spinnerSlice'\r\n\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        searchSlice,\r\n        messageSlice,\r\n        SelectedImageSlice,\r\n        CollectionSlice,\r\n        SelectedCollectionSlice,\r\n        spinnerSlice\r\n    }\r\n})\r\n\r\n","import React, { Component } from 'react';\r\n//import { setMessage } from '../../redux/slices/messageSlice';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false, error: null, errorInfo: null };\r\n  }\r\n\r\n  // Método del ciclo de vida para capturar errores\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  }\r\n\r\n  // Método para registrar detalles adicionales del error\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({ error, errorInfo });\r\n    // Puedes registrar el error en un servicio externo si es necesario\r\n    //dispatchEvent(setMessage({title: 'Error', message:  \"Error al obtener las colecciones:\" + errorInfo, type: 'danger'}))\r\n    console.error(\"ErrorBoundary atrapó un error:\", error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // Renderizar un mensaje de error personalizado\r\n      return (\r\n        <div>\r\n          <h1>Algo salió mal.</h1>\r\n          <details style={{ whiteSpace: 'pre-wrap' }}>\r\n            {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo?.componentStack}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Renderizar los hijos si no hay errores\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport RoutesApp from './routes/RoutesApp';\nimport store from './redux'\n\nimport './App.css';\nimport ErrorBoundary from './components/errorBoundary/ErrorBoundary';\n\nfunction App() {\n  return (\n      <Provider store={store}>\n        <ErrorBoundary>\n          <RoutesApp/>\n        </ErrorBoundary>\n      </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  /*<React.StrictMode>*/\n    <App />\n  /*</React.StrictMode>*/\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}